<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ip="clr-namespace:JP.HCZZP.WPFApp.Infrastructure;assembly=JP.HCZZP.WPFApp.Infrastructure"
                    xmlns:res="clr-namespace:JP.HCZZP.WPFApp.Instruct.Modules.ResourceLibrary;assembly=JP.HCZZP.WPFApp.Instruct.Modules.ResourceLibrary"
                    xmlns:converter="clr-namespace:JP.HCZZP.WPFApp.Infrastructure.Converter;assembly=JP.HCZZP.WPFApp.Infrastructure"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <converter:StringToImageConverter x:Key="StringToImageConverter"/>

    <Style TargetType="{x:Type Button}" x:Key="DutyPathButton">
        <Setter Property="ip:ControlAttachProperty.CornerRadius" Value="3"/>
        <Setter Property="ip:ControlAttachProperty.Data" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultSmalFontSize}"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="PART_Root">
                        <Border Opacity="0.5" x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding ip:ControlAttachProperty.CornerRadius}">
                        </Border>
                        <Border Margin="2" Background="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding ip:ControlAttachProperty.CornerRadius}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path x:Name="Path" Margin="0 0 5 0" Data="{TemplateBinding ip:ControlAttachProperty.Data}" Fill="{TemplateBinding Foreground}" Height="12" Width="12" Stretch="Fill"/>
                                <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" 
                                                  TextElement.FontSize="{TemplateBinding FontSize}" Focusable="False"
                                                  VerticalAlignment="Center"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </StackPanel>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ip:ControlAttachProperty.Data" Value="{x:Null}">
                            <Setter TargetName="Path" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="BorderBrush" Value="#677077"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PART_Root" Property="Margin" Value="1 1 0 0"/>
                            <!--<Setter Property="Opacity" Value="0.6"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--没有背景的Button-->
    <Style TargetType="{x:Type Button}" x:Key="ButtonWithoutBackground" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#00000000" x:Name="Root" RenderTransformOrigin="0.5,0.5">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Duration="0:0:00.1" To="1"/>
                                        <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Duration="0:0:00.1" To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Duration="0:0:00.1" To="0"/>
                                        <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Duration="0:0:00.1" To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
             <Trigger Property="IsMouseOver" Value="true">
             <Setter Property="Background" Value="{TemplateBinding Background}"/>
             </Trigger>
             </Style.Triggers>-->
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonWithoutBackgroundStep" BasedOn="{StaticResource ButtonWithoutBackground}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="110"/>
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}"/>
        <Setter Property="Padding" Value="15 5"/>
        <Setter Property="Foreground" Value="#0BFFBF"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}" >

                        <Border x:Name="BtnBorder2" BorderBrush="#009BFF" BorderThickness="2" CornerRadius="3">
                            <Border.Effect>
                                <BlurEffect Radius="4" KernelType="Box"   RenderingBias="Quality" />
                            </Border.Effect>
                        </Border>
                        <Border x:Name="BtnBorder3" BorderBrush="#0AFFBF"  BorderThickness="1" CornerRadius="3">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="5" Color="#009BFF" Opacity="1" RenderingBias="Quality" ShadowDepth="0"/>
                            </Border.Effect>
                        </Border>
                        <TextBlock Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" >
                            <TextBlock.Effect>
                                <DropShadowEffect BlurRadius="25" Color="#0AFFBF" Opacity="1" RenderingBias="Quality" ShadowDepth="0"/>

                            </TextBlock.Effect>
                        </TextBlock>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonWithoutBackgroundOnCancel" BasedOn="{StaticResource ButtonWithoutBackground}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="110"/>
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}"/>
        <Setter Property="Padding" Value="15 5"/>
        <Setter Property="Foreground" Value="#6FDAFC"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}" >
                        <TextBlock Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" >
                            <TextBlock.Effect>
                                <DropShadowEffect BlurRadius="20" Color="{Binding Path=Foreground.Color, RelativeSource={RelativeSource AncestorType=Button,Mode=FindAncestor}}" Direction="0" Opacity="1" RenderingBias="Quality" ShadowDepth="0"/>
                            </TextBlock.Effect>

                        </TextBlock>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--没有背景的ToggleButton-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonWithoutBackground" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="IsThreeState" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--圆角按钮-->
    <Style x:Key="RoundedCornerButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {x:Static res:CustomResources.FourForeKey}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="10">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HighLightBoardButton" TargetType="{x:Type Button}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="#0B4A84"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border BorderBrush="#0B83C4" BorderThickness="2" CornerRadius="3"/>
                        <Grid>
                            <Border Margin="1" BorderBrush="#3C7DD1" BorderThickness="2" CornerRadius="3">
                                <Border.Effect>
                                    <BlurEffect Radius="1" KernelType="Box"  RenderingBias="Quality"/>
                                </Border.Effect>
                            </Border>
                            <ContentPresenter Margin="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              TextElement.FontSize="{TemplateBinding FontSize}"
                                              TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="0.6"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--RadioButton-->
    <Style x:Key="CircleRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#FF309BED"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="微软雅黑" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,0,0,0" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="#04FCFC" MinWidth="12" MinHeight="12" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.7"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF5593FF"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF309BED"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF3C77DD"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonPlanStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static res:CustomResources.ThreeForeKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static res:CustomResources.TwoSizeKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"  VerticalAlignment="{TemplateBinding VerticalAlignment}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="templateRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border Visibility="Collapsed" x:Name="radioButtonBorder"   CornerRadius="100" >
                                <Grid x:Name="markGrid" Margin="2">
                                    <Ellipse x:Name="optionMark" Fill="#04FCFC" MinWidth="12" MinHeight="12" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity"  Value="0.7"/>
                            
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static res:CustomResources.FourForeKey}}"/>
                            <Setter Property="BorderThickness" Value="1 1 1 0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>